"use client";

import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/components/auth';

interface OrderItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image?: string;
  productType: string;
}

interface Order {
  _id: string;
  orderNumber: string;
  items: OrderItem[];
  totalAmount: number;
  status: 'pending' | 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled';
  artworkStatus: 'awaiting_review' | 'approved' | 'revision_required' | 'plates_created';
  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';
  createdAt: string;
}

const MyAccountPage = () => {
    const [rememberMe, setRememberMe] = useState(false);
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [registerEmail, setRegisterEmail] = useState('');
    const [name, setName] = useState('');
    const [registerPassword, setRegisterPassword] = useState('');
    const [orders, setOrders] = useState<Order[]>([]);
    const [ordersLoading, setOrdersLoading] = useState(false);
    const [ordersError, setOrdersError] = useState<string | null>(null);
    
    const { user, login, register, isLoading, error, clearError, logout } = useAuth();
    const router = useRouter();    // Fetch user orders when user is logged in
    useEffect(() => {
        if (user?._id) {
            fetchUserOrders();
        }
    }, [user, fetchUserOrders]);const fetchUserOrders = useCallback(async () => {
        if (!user?._id) return;
        
        setOrdersLoading(true);
        setOrdersError(null);
        
        try {
            const response = await fetch(`/api/orders?userId=${user._id}`);
            if (!response.ok) {
                throw new Error('Failed to fetch orders');
            }
            const fetchedOrders = await response.json();
            setOrders(fetchedOrders);
        } catch (error) {
            console.error('Error fetching orders:', error);
            setOrdersError('Failed to load orders');
        } finally {
            setOrdersLoading(false);
        }
    }, [user?._id]);

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    };

    const getStatusBadgeColor = (status: string) => {
        switch (status) {
            case 'delivered':
                return 'bg-green-100 text-green-800';
            case 'shipped':
                return 'bg-blue-100 text-blue-800';
            case 'processing':
                return 'bg-yellow-100 text-yellow-800';
            case 'confirmed':
                return 'bg-indigo-100 text-indigo-800';
            case 'pending':
                return 'bg-gray-100 text-gray-800';
            case 'cancelled':
                return 'bg-red-100 text-red-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };

    // Redirect admin users to admin dashboard if they're already logged in
    React.useEffect(() => {
        if (user?.isAdmin) {
            router.push('/admin/orders');
        }
    }, [user, router]);

    const handleLogin = async (e: React.FormEvent) => {
        e.preventDefault();
        await login(email, password);
    };

    const handleRegister = async (e: React.FormEvent) => {
        e.preventDefault();
        await register(name, registerEmail, registerPassword);
    };

    // If user is logged in, show account dashboard
    if (user) {
        return (
            <div className="bg-gray-50 min-h-screen py-16 px-4">
                <div className="max-w-6xl mx-auto">
                    <div className="text-center mb-10">
                        <h1 className="text-3xl md:text-4xl font-bold">My Account</h1>
                    </div>

                    <div className="bg-white rounded-lg shadow-sm overflow-hidden">
                        <div className="p-8">
                            <div className="flex justify-between items-center mb-6">
                                <h2 className="text-2xl font-bold">Hello, {user.name}</h2>
                                <button
                                    onClick={logout}
                                    className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                                >
                                    Sign Out
                                </button>
                            </div>

                            <div className="border-t border-gray-200 pt-6">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div className="bg-gray-50 p-6 rounded-lg">
                                        <h3 className="font-semibold text-lg mb-4">Account Information</h3>
                                        <p className="text-gray-600 text-sm mb-1">Name</p>
                                        <p className="font-medium mb-3">{user.name}</p>
                                        <p className="text-gray-600 text-sm mb-1">Email</p>
                                        <p className="font-medium">{user.email}</p>
                                    </div>                                    <div className="bg-gray-50 p-6 rounded-lg">
                                        <h3 className="font-semibold text-lg mb-4">Recent Orders</h3>
                                        
                                        {ordersLoading ? (
                                            <div className="text-center py-4">
                                                <div className="inline-flex items-center">
                                                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-purple-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                    </svg>
                                                    Loading orders...
                                                </div>
                                            </div>
                                        ) : ordersError ? (
                                            <div className="text-center py-4">
                                                <p className="text-red-500 mb-2">{ordersError}</p>
                                                <button 
                                                    onClick={fetchUserOrders}
                                                    className="text-sm text-purple-600 hover:text-purple-700 underline"
                                                >
                                                    Try again
                                                </button>
                                            </div>
                                        ) : orders.length === 0 ? (
                                            <>
                                                <p className="text-gray-500 text-center py-4">You haven&apos;t placed any orders yet.</p>
                                                <div className="mt-4">
                                                    <Link 
                                                        href="/shop" 
                                                        className="inline-flex items-center text-[#7000fe] hover:text-purple-700"
                                                    >
                                                        <span>Browse products</span>
                                                        <svg className="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                                                        </svg>
                                                    </Link>
                                                </div>
                                            </>
                                        ) : (
                                            <div className="space-y-4">
                                                {orders.slice(0, 3).map((order) => (
                                                    <div key={order._id} className="border border-gray-200 rounded-lg p-4 bg-white">
                                                        <div className="flex justify-between items-start mb-2">
                                                            <div>
                                                                <h4 className="font-medium text-gray-900">#{order.orderNumber}</h4>
                                                                <p className="text-sm text-gray-500">{formatDate(order.createdAt)}</p>
                                                            </div>
                                                            <div className="text-right">
                                                                <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusBadgeColor(order.status)}`}>
                                                                    {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                                                                </span>
                                                                <p className="text-sm font-medium text-gray-900 mt-1">${order.totalAmount.toFixed(2)}</p>
                                                            </div>
                                                        </div>
                                                        <div className="text-sm text-gray-600">
                                                            {order.items.length === 1 ? (
                                                                <span>{order.items[0].name}</span>
                                                            ) : (
                                                                <span>{order.items[0].name} + {order.items.length - 1} more item{order.items.length > 2 ? 's' : ''}</span>
                                                            )}
                                                        </div>
                                                        {order.artworkStatus && (
                                                            <div className="mt-2">
                                                                <span className="text-xs text-gray-500">
                                                                    Artwork: {order.artworkStatus.replace('_', ' ').charAt(0).toUpperCase() + order.artworkStatus.replace('_', ' ').slice(1)}
                                                                </span>
                                                            </div>
                                                        )}
                                                    </div>
                                                ))}
                                                {orders.length > 3 && (
                                                    <div className="text-center mt-4">
                                                        <Link 
                                                            href="/orders" 
                                                            className="inline-flex items-center text-[#7000fe] hover:text-purple-700 font-medium"
                                                        >
                                                            <span>View all orders</span>
                                                            <svg className="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                                                            </svg>
                                                        </Link>
                                                    </div>
                                                )}
                                            </div>
                                        )}
                                    </div>
                                </div>

                                <div className="mt-6 bg-gray-50 p-6 rounded-lg">
                                    <h3 className="font-semibold text-lg mb-4">Wishlist</h3>
                                    <Link 
                                        href="/wishlist" 
                                        className="inline-flex items-center text-[#7000fe] hover:text-purple-700"
                                    >
                                        <span>View your wishlist</span>
                                        <svg className="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                                        </svg>
                                    </Link>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    // If user is not logged in, show login/register form
    return (
        <div className="bg-gray-50 min-h-screen py-16 px-4">
            <div className="max-w-6xl mx-auto">
                {/* Page Title */}
                <div className="text-center mb-10">
                    <h1 className="text-3xl md:text-4xl font-bold">My Account</h1>
                </div>

                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6 relative">
                        <span className="block sm:inline">{error}</span>
                        <button 
                            onClick={clearError}
                            className="absolute top-0 bottom-0 right-0 px-4 py-3"
                        >
                            <span className="sr-only">Dismiss</span>
                            <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                            </svg>
                        </button>
                    </div>
                )}

                <div className="grid grid-cols-1 md:grid-cols-2 gap-0 bg-white rounded-lg shadow-sm overflow-hidden">
                    {/* Login Section */}
                    <div className="bg-white p-8 md:border-r border-gray-200">
                        <h2 className="text-2xl font-bold mb-8">Login</h2>
                        <form onSubmit={handleLogin}>
                            <div className="mb-6">
                                <label htmlFor="username" className="block mb-2 text-sm font-medium">
                                    Email address <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="email"
                                    id="username"
                                    className="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#7000fe] bg-gray-50"
                                    placeholder="Enter your email address..."
                                    required
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                />
                            </div>
                            <div className="mb-6">
                                <label htmlFor="password" className="block mb-2 text-sm font-medium">
                                    Password <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="password"
                                    id="password"
                                    className="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#7000fe] bg-gray-50"
                                    placeholder="Enter your password..."
                                    required
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                />
                            </div>
                            <div className="flex items-center justify-between mb-6">                                <div className="flex items-center">
                                    <input
                                        type="checkbox"
                                        id="remember-me"
                                        className="w-4 h-4 border-gray-300 rounded focus:ring-[#7000fe] text-[#7000fe]"
                                        checked={rememberMe}
                                        onChange={() => setRememberMe(!rememberMe)}
                                    />
                                    <label htmlFor="remember-me" className="ml-2 text-sm">Remember me</label>
                                </div>
                                <Link href="/forgot-password" className="text-sm text-gray-500 hover:text-[#7000fe] hover:underline">
                                    Lost your password?
                                </Link>
                            </div>
                            <button
                                type="submit"
                                className="w-full bg-[#7000fe] hover:bg-purple-600 text-white font-medium py-3 px-4 rounded-full transition duration-300 disabled:opacity-50"
                                disabled={isLoading}
                            >
                                {isLoading ? 'Signing in...' : 'Log in'}
                            </button>
                        </form>
                    </div>

                    {/* Register Section */}
                    <div className="bg-white p-8">
                        <h2 className="text-2xl font-bold mb-8">Register</h2>
                        <form onSubmit={handleRegister}>
                            <div className="mb-6">
                                <label htmlFor="register-name" className="block mb-2 text-sm font-medium">
                                    Full Name <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="text"
                                    id="register-name"
                                    className="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#7000fe] bg-gray-50"
                                    placeholder="Enter your full name..."
                                    required
                                    value={name}
                                    onChange={(e) => setName(e.target.value)}
                                />
                            </div>
                            <div className="mb-6">
                                <label htmlFor="register-email" className="block mb-2 text-sm font-medium">
                                    Email address <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="email"
                                    id="register-email"
                                    className="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#7000fe] bg-gray-50"
                                    placeholder="Enter your email..."
                                    required
                                    value={registerEmail}
                                    onChange={(e) => setRegisterEmail(e.target.value)}
                                />
                            </div>
                            <div className="mb-6">
                                <label htmlFor="register-password" className="block mb-2 text-sm font-medium">
                                    Password <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="password"
                                    id="register-password"
                                    className="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#7000fe] bg-gray-50"
                                    placeholder="Create a password..."
                                    required
                                    minLength={6}
                                    value={registerPassword}
                                    onChange={(e) => setRegisterPassword(e.target.value)}
                                />
                                <p className="text-sm text-gray-500 mt-1">
                                    Password must be at least 6 characters long
                                </p>
                            </div>

                            <p className="text-sm text-gray-500 mb-6">
                                Your personal data will be used to support your experience throughout this website, to manage access to your account, and for other purposes described in our <Link href="/privacy-notice" className="text-[#7000fe] hover:text-purple-800 hover:underline font-medium">privacy policy</Link>.
                            </p>
                            <button
                                type="submit"
                                className="w-full bg-[#7000fe] hover:bg-purple-600 text-white font-medium py-3 px-4 rounded-full transition duration-300 disabled:opacity-50"
                                disabled={isLoading}
                            >
                                {isLoading ? 'Creating Account...' : 'Register'}
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default MyAccountPage;